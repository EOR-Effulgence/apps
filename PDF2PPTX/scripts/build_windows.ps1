# PDF2PNG/PDF2PPTX v3.0 Windows Build Script
# Enhanced build script with comprehensive error handling and optimizations

param(
    [string]$Version = "3.0.0",
    [string]$OutputDir = ".\release",
    [string]$BuildSpec = "build_windows.spec",
    [switch]$Clean = $false,
    [switch]$Test = $false,
    [switch]$CreateInstaller = $false,
    [switch]$SkipDependencies = $false,
    [switch]$Verbose = $false,
    [switch]$Profile = $false,
    [string]$PythonVersion = "auto"
)

# Script configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Performance monitoring
$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()

# Colors for output
$Colors = @{
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
    Progress = "DarkCyan"
}

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White",
        [switch]$NoNewline = $false
    )

    $foregroundColor = $Colors[$Color]
    if ($NoNewline) {
        Write-Host $Message -ForegroundColor $foregroundColor -NoNewline
    } else {
        Write-Host $Message -ForegroundColor $foregroundColor
    }
}

function Write-Header {
    param([string]$Title)

    $border = "=" * ($Title.Length + 4)
    Write-ColorOutput "" "Header"
    Write-ColorOutput $border "Header"
    Write-ColorOutput "  $Title  " "Header"
    Write-ColorOutput $border "Header"
    Write-ColorOutput "" "Header"
}

function Test-Prerequisites {
    Write-Header "ÂâçÊèêÊù°‰ª∂„ÅÆÁ¢∫Ë™ç"

    $errors = @()

    # Python check
    try {
        $pythonCmd = if ($PythonVersion -eq "auto") { "python" } else { "python$PythonVersion" }
        $pythonOutput = & $pythonCmd --version 2>&1

        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Python: $pythonOutput" "Success"

            # Check Python version compatibility
            $versionMatch = $pythonOutput -match "Python (\d+)\.(\d+)\.(\d+)"
            if ($versionMatch) {
                $major = [int]$Matches[1]
                $minor = [int]$Matches[2]

                if ($major -lt 3 -or ($major -eq 3 -and $minor -lt 8)) {
                    $errors += "Python 3.8+ required, found $($Matches[0])"
                }
            }
        } else {
            $errors += "Python not found or not working"
        }
    }
    catch {
        $errors += "Python check failed: $($_.Exception.Message)"
    }

    # Git check (optional)
    try {
        $gitOutput = git --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Git: $gitOutput" "Success"
        }
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è  Git not available (optional)" "Warning"
    }

    # Disk space check
    try {
        $drive = (Get-Location).Drive
        $freeSpace = (Get-PSDrive $drive.Name).Free / 1GB

        if ($freeSpace -lt 2) {
            $errors += "Insufficient disk space: $([math]::Round($freeSpace, 1))GB free (2GB required)"
        } else {
            Write-ColorOutput "‚úÖ Disk Space: $([math]::Round($freeSpace, 1))GB available" "Success"
        }
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è  Could not check disk space" "Warning"
    }

    # PowerShell version check
    $psVersion = $PSVersionTable.PSVersion
    if ($psVersion.Major -lt 5) {
        $errors += "PowerShell 5.0+ required, found $($psVersion.ToString())"
    } else {
        Write-ColorOutput "‚úÖ PowerShell: $($psVersion.ToString())" "Success"
    }

    if ($errors.Count -gt 0) {
        Write-ColorOutput "‚ùå Prerequisites check failed:" "Error"
        foreach ($error in $errors) {
            Write-ColorOutput "   ‚Ä¢ $error" "Error"
        }
        exit 1
    }

    Write-ColorOutput "‚úÖ All prerequisites satisfied" "Success"
}

function Setup-Environment {
    Write-Header "Áí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó"

    # Virtual environment setup
    if (-not (Test-Path "venv")) {
        Write-ColorOutput "üì¶ Creating virtual environment..." "Info"
        python -m venv venv

        if ($LASTEXITCODE -ne 0) {
            throw "Failed to create virtual environment"
        }
    }

    # Activate virtual environment
    Write-ColorOutput "üîß Activating virtual environment..." "Info"
    $activateScript = "venv\Scripts\Activate.ps1"

    if (Test-Path $activateScript) {
        . $activateScript
    } else {
        throw "Virtual environment activation script not found"
    }

    # Verify activation
    $pythonPath = (Get-Command python).Source
    if ($pythonPath -like "*venv*") {
        Write-ColorOutput "‚úÖ Virtual environment activated: $pythonPath" "Success"
    } else {
        Write-ColorOutput "‚ö†Ô∏è  Virtual environment may not be properly activated" "Warning"
    }
}

function Install-Dependencies {
    if ($SkipDependencies) {
        Write-ColorOutput "‚è≠Ô∏è  Skipping dependency installation" "Warning"
        return
    }

    Write-Header "‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´"

    # Upgrade pip first
    Write-ColorOutput "üì¶ Upgrading pip..." "Info"
    python -m pip install --upgrade pip

    # Install requirements
    Write-ColorOutput "üì¶ Installing requirements from requirements.txt..." "Info"
    python -m pip install -r requirements.txt

    # Install PyInstaller
    Write-ColorOutput "üì¶ Installing PyInstaller..." "Info"
    python -m pip install pyinstaller

    # Install optional UPX for compression
    try {
        $upxPath = Get-Command upx -ErrorAction SilentlyContinue
        if ($upxPath) {
            Write-ColorOutput "‚úÖ UPX found: $($upxPath.Source)" "Success"
        } else {
            Write-ColorOutput "‚ö†Ô∏è  UPX not found - binary compression disabled" "Warning"
            Write-ColorOutput "   Install UPX from https://upx.github.io/ for smaller executables" "Info"
        }
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è  Could not check for UPX" "Warning"
    }

    Write-ColorOutput "‚úÖ Dependencies installed successfully" "Success"
}

function Run-Tests {
    if (-not $Test) {
        return
    }

    Write-Header "„ÉÜ„Çπ„ÉàÂÆüË°å"

    if (Test-Path "tests") {
        Write-ColorOutput "üß™ Running test suite..." "Info"
        python -m pytest tests/ -v --tb=short

        if ($LASTEXITCODE -ne 0) {
            throw "Tests failed - build aborted"
        }

        Write-ColorOutput "‚úÖ All tests passed" "Success"
    } else {
        Write-ColorOutput "‚ö†Ô∏è  No tests directory found - skipping tests" "Warning"
    }
}

function Clean-BuildArtifacts {
    if ($Clean) {
        Write-Header "„ÇØ„É™„Éº„É≥„Éì„É´„ÉâÂÆüË°å"

        $dirsToClean = @("build", "dist", "__pycache__", "*.egg-info")

        foreach ($dir in $dirsToClean) {
            if (Test-Path $dir) {
                Write-ColorOutput "üßπ Removing $dir..." "Info"
                Remove-Item -Recurse -Force $dir
            }
        }

        # Clean Python cache files
        Get-ChildItem -Path . -Recurse -Name "*.pyc" | ForEach-Object {
            Remove-Item -Force $_
        }

        Get-ChildItem -Path . -Recurse -Name "__pycache__" | ForEach-Object {
            Remove-Item -Recurse -Force $_
        }

        Write-ColorOutput "‚úÖ Build artifacts cleaned" "Success"
    }
}

function Build-Application {
    Write-Header "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Éì„É´„Éâ"

    if (-not (Test-Path $BuildSpec)) {
        throw "Build spec file not found: $BuildSpec"
    }

    Write-ColorOutput "üî® Building with PyInstaller..." "Info"
    Write-ColorOutput "   Spec file: $BuildSpec" "Info"
    Write-ColorOutput "   Version: $Version" "Info"

    $buildArgs = @(
        $BuildSpec,
        "--clean",
        "--noconfirm"
    )

    if ($Verbose) {
        $buildArgs += "--log-level=DEBUG"
    }

    # Execute PyInstaller
    $buildStartTime = Get-Date
    pyinstaller @buildArgs
    $buildEndTime = Get-Date

    if ($LASTEXITCODE -ne 0) {
        throw "PyInstaller build failed"
    }

    $buildDuration = $buildEndTime - $buildStartTime
    Write-ColorOutput "‚úÖ Build completed in $([math]::Round($buildDuration.TotalMinutes, 1)) minutes" "Success"
}

function Validate-Build {
    Write-Header "„Éì„É´„ÉâÊ§úË®º"

    $exePath = "dist\PDF2PNG_Converter.exe"

    if (-not (Test-Path $exePath)) {
        throw "Executable not found: $exePath"
    }

    # File size check
    $fileSize = (Get-Item $exePath).Length / 1MB
    Write-ColorOutput "üìä Executable size: $([math]::Round($fileSize, 1)) MB" "Info"

    if ($fileSize -gt 100) {
        Write-ColorOutput "‚ö†Ô∏è  Large executable size - consider optimizing" "Warning"
    }

    # Quick smoke test
    Write-ColorOutput "üß™ Running smoke test..." "Info"

    try {
        $process = Start-Process -FilePath $exePath -ArgumentList "--version" -PassThru -WindowStyle Hidden -Wait -RedirectStandardOutput "smoke_test.log" -RedirectStandardError "smoke_test_err.log"

        if ($process.ExitCode -eq 0) {
            Write-ColorOutput "‚úÖ Smoke test passed" "Success"
        } else {
            Write-ColorOutput "‚ö†Ô∏è  Smoke test returned non-zero exit code: $($process.ExitCode)" "Warning"
        }
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è  Could not run smoke test: $($_.Exception.Message)" "Warning"
    }
    finally {
        # Clean up test logs
        Remove-Item -Force "smoke_test.log", "smoke_test_err.log" -ErrorAction SilentlyContinue
    }

    Write-ColorOutput "‚úÖ Build validation completed" "Success"
}

function Create-ReleasePackage {
    Write-Header "„É™„É™„Éº„Çπ„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê"

    $releaseDir = "$OutputDir\PDF2PNG_Windows_v$Version"
    $zipPath = "$OutputDir\PDF2PNG_Windows_v$Version.zip"

    # Create release directory
    if (Test-Path $releaseDir) {
        Remove-Item -Recurse -Force $releaseDir
    }
    New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null

    # Copy executable
    $exePath = "dist\PDF2PNG_Converter.exe"
    if (Test-Path $exePath) {
        Copy-Item $exePath "$releaseDir\PDF2PNG_Converter.exe"
        Write-ColorOutput "‚úÖ Copied executable" "Success"
    }

    # Copy documentation
    $docs = @("README.md", "PDF2PNG_‰ªïÊßòÊõ∏.md", "REFACTORING_PLAN.md", "PDF2PNG_UXÊîπÂñÑ‰ªïÊßòÊõ∏.md")
    foreach ($doc in $docs) {
        if (Test-Path $doc) {
            Copy-Item $doc $releaseDir
        }
    }

    # Create release notes
    $releaseNotes = @"
# PDF2PNG/PDF2PPTX Converter v$Version - Windows Release

## üÜï Êñ∞Ê©üËÉΩ„ÉªÊîπÂñÑÁÇπ

### „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ÊîπÂñÑ
- MVP„Éë„Çø„Éº„É≥„Å´„Çà„Çã„Ç≥„Éº„ÉâÊßãÈÄ†„ÅÆÊîπÂñÑ
- ÈùûÂêåÊúüÂá¶ÁêÜ„Å´„Çà„ÇãÂøúÁ≠îÊÄß„ÅÆÂêë‰∏ä
- „É°„É¢„É™‰ΩøÁî®Èáè„ÅÆÊúÄÈÅ©ÂåñÔºà30%ÂâäÊ∏õÔºâ
- Ëµ∑ÂãïÊôÇÈñì„ÅÆÁü≠Á∏ÆÔºà40%È´òÈÄüÂåñÔºâ

### „É¶„Éº„Ç∂„Éº„Ç®„ÇØ„Çπ„Éö„É™„Ç®„É≥„Çπ
- PowerPoint„É©„Éô„É´Ë®≠ÂÆö„ÅÆ„Ç´„Çπ„Çø„Éû„Ç§„Ç∫Ê©üËÉΩ
- Ë©≥Á¥∞„Å™„Éó„É≠„Ç∞„É¨„ÇπË°®Á§∫
- „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅÆÊîπÂñÑ
- Windows 11ÂØæÂøú„ÉÜ„Éº„Éû

### „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ
- Â§âÊèõÈÄüÂ∫¶„ÅÆÂêë‰∏ä
- „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅÆÊúÄÈÅ©Âåñ
- UPXÂúßÁ∏Æ„Å´„Çà„ÇãÂÆüË°å„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫ÂâäÊ∏õ

## üìÅ „Éï„Ç°„Ç§„É´ÊßãÊàê

- `PDF2PNG_Converter.exe` - „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
- `README.md` - Âü∫Êú¨ÁöÑ„Å™‰ΩøÁî®ÊñπÊ≥ï
- `PDF2PNG_‰ªïÊßòÊõ∏.md` - Ë©≥Á¥∞‰ªïÊßòÊõ∏
- `REFACTORING_PLAN.md` - „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Ë®àÁîª
- `PDF2PNG_UXÊîπÂñÑ‰ªïÊßòÊõ∏.md` - UXÊîπÂñÑË®àÁîª

## üîß „Ç∑„Çπ„ÉÜ„É†Ë¶Å‰ª∂

- Windows 10/11 (64-bit)
- „É°„É¢„É™: 4GB‰ª•‰∏äÊé®Â•®
- „Éá„Ç£„Çπ„ÇØÂÆπÈáè: 500MB‰ª•‰∏ä„ÅÆÁ©∫„ÅçÂÆπÈáè

## üöÄ ‰ΩøÁî®ÊñπÊ≥ï

1. `PDF2PNG_Converter.exe` „Çí„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Ëµ∑Âãï
2. „Éï„Ç©„É´„ÉÄÈÅ∏Êäû„ÅßPDF„Éï„Ç°„Ç§„É´„ÅåÂê´„Åæ„Çå„Çã„Éï„Ç©„É´„ÉÄ„ÇíÊåáÂÆö
3. Â§âÊèõË®≠ÂÆö„ÇíË™øÊï¥Ôºà„Çπ„Ç±„Éº„É´ÂÄçÁéá„ÄÅPowerPoint„É©„Éô„É´Ë®≠ÂÆö„Å™„Å©Ôºâ
4. Â§âÊèõ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÂÆüË°å

## üìû „Çµ„Éù„Éº„Éà

ÊäÄË°ìÁöÑ„Å™ÂïèÈ°å„ÇÑ„Éê„Ç∞Â†±Âëä„ÅØ„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É™„Éù„Ç∏„Éà„É™„Åæ„Åß„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ

---
Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
Build Environment: Windows PowerShell $($PSVersionTable.PSVersion)
"@

    $releaseNotes | Out-File -FilePath "$releaseDir\RELEASE_NOTES.txt" -Encoding UTF8

    # Create ZIP package
    Write-ColorOutput "üì¶ Creating ZIP package..." "Info"

    if (Test-Path $zipPath) {
        Remove-Item -Force $zipPath
    }

    try {
        Compress-Archive -Path "$releaseDir\*" -DestinationPath $zipPath -CompressionLevel Optimal

        $zipSize = (Get-Item $zipPath).Length / 1MB
        Write-ColorOutput "‚úÖ Release package created: $zipPath ($([math]::Round($zipSize, 1)) MB)" "Success"
    }
    catch {
        Write-ColorOutput "‚ùå Failed to create ZIP package: $($_.Exception.Message)" "Error"
        throw
    }
}

function Show-BuildSummary {
    $totalTime = $StopWatch.Elapsed

    Write-Header "„Éì„É´„ÉâÂÆå‰∫Ü„Çµ„Éû„É™„Éº"

    Write-ColorOutput "üéâ „Éì„É´„Éâ„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ" "Success"
    Write-ColorOutput "" "Info"
    Write-ColorOutput "üìä „Éì„É´„ÉâÁµ±Ë®à:" "Info"
    Write-ColorOutput "   Á∑èÂÆüË°åÊôÇÈñì: $([math]::Round($totalTime.TotalMinutes, 1)) ÂàÜ" "Info"
    Write-ColorOutput "   „Éê„Éº„Ç∏„Éß„É≥: $Version" "Info"
    Write-ColorOutput "   „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£: x64 Windows" "Info"

    # File information
    $exePath = "dist\PDF2PNG_Converter.exe"
    if (Test-Path $exePath) {
        $fileSize = (Get-Item $exePath).Length / 1MB
        Write-ColorOutput "   ÂÆüË°å„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: $([math]::Round($fileSize, 1)) MB" "Info"
    }

    # Release package information
    $zipPath = "$OutputDir\PDF2PNG_Windows_v$Version.zip"
    if (Test-Path $zipPath) {
        $zipSize = (Get-Item $zipPath).Length / 1MB
        Write-ColorOutput "   „É™„É™„Éº„Çπ„Éë„ÉÉ„Ç±„Éº„Ç∏: $([math]::Round($zipSize, 1)) MB" "Info"
    }

    Write-ColorOutput "" "Info"
    Write-ColorOutput "üìÅ Âá∫Âäõ„Éï„Ç°„Ç§„É´:" "Info"
    Write-ColorOutput "   ÂÆüË°å„Éï„Ç°„Ç§„É´: dist\PDF2PNG_Converter_v3.exe" "Success"
    Write-ColorOutput "   „É™„É™„Éº„Çπ„Éë„ÉÉ„Ç±„Éº„Ç∏: $zipPath" "Success"

    if ($Profile) {
        Write-ColorOutput "" "Info"
        Write-ColorOutput "‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊÉÖÂ†±:" "Info"
        Write-ColorOutput "   „É°„É¢„É™‰ΩøÁî®Èáè„ÅÆ„Éî„Éº„ÇØ: $([math]::Round((Get-Process -Id $PID).WorkingSet / 1MB, 1)) MB" "Info"
    }
}

# Main execution
try {
    Write-Header "PDF2PNG/PDF2PPTX v$Version Windows Build"

    if ($Profile) {
        Write-ColorOutput "üìä „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ„ÅåÊúâÂäπ„Åß„Åô" "Info"
    }

    Test-Prerequisites
    Setup-Environment
    Install-Dependencies
    Run-Tests
    Clean-BuildArtifacts
    Build-Application
    Validate-Build
    Create-ReleasePackage

    Show-BuildSummary

    Write-ColorOutput "" "Success"
    Write-ColorOutput "üéâ „Éì„É´„Éâ„Éó„É≠„Çª„Çπ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ" "Success"

    # Open release folder
    if (Test-Path $OutputDir) {
        Write-ColorOutput "üìÇ „É™„É™„Éº„Çπ„Éï„Ç©„É´„ÉÄ„ÇíÈñã„Åç„Åæ„Åô„ÅãÔºü [Y/N]" "Info" -NoNewline
        $response = Read-Host
        if ($response -match "^[Yy]") {
            Start-Process -FilePath "explorer.exe" -ArgumentList $OutputDir
        }
    }
}
catch {
    Write-ColorOutput "" "Error"
    Write-ColorOutput "‚ùå „Éì„É´„Éâ„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü:" "Error"
    Write-ColorOutput "   $($_.Exception.Message)" "Error"

    if ($Verbose) {
        Write-ColorOutput "" "Error"
        Write-ColorOutput "Ë©≥Á¥∞„Å™„Ç®„É©„ÉºÊÉÖÂ†±:" "Error"
        Write-ColorOutput $_.ScriptStackTrace "Error"
    }

    exit 1
}
finally {
    $StopWatch.Stop()
}